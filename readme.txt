开始我们在设计模块时过度设计
我们在设计软件时，进行需求分析和架构设计后，过于着急进行编码，没有经过细致的详细设计

设计了一些冗余的模块（复杂的数据表，画e-r图时过度设计），这些模块结构复杂，在后期编码时给我们带来了巨大的困难
所以我们简化了我们的框架，采用更清爽的设计，只保留最核心的功能

我们的开发小组大部分没有微信小程序开发的基础，所以我们自学了微信小程序框架，我们发现这个框架是基于javascript，html和css构建的，虽然我们对其通信和人机交互的实现方式并不了解，但是我们通过多写demo测试、阅读官方说明文档和参考开源中国网站上的项目，很快我们的团队便掌握了微信小程序框架的使用。

我们在解决微信小程序网络请求跨域问题时，发现在调试模式下，可以直接通过项目设置关闭程序对域名的校验，正式发布的小程序合法域名是在登录mp管理后台后进行配置的。

wxml是页面构建语言,js是框架接口,我们在处理列表渲染和条件渲染时现学现用,阅读了大量微信小程序官方文档,写了数个demo文件,实现了页面渲染的逻辑控制
微信小程序 js中遍历list   https://blog.csdn.net/yechaoa/article/details/82155518

【微信小程序】数组操作  https://www.cnblogs.com/weiboyuan/p/9232283.html

request 示例代码
wx.request({
  url: 'test.php', //仅为示例，并非真实的接口地址
  data: {
    x: '',
    y: ''
  },
  header: {
    'content-type': 'application/json' // 默认值
  },
  success (res) {
    console.log(res.data)
  }
})

----------------------------------------------------------------------------------------------------------------
在设计点餐管理系统管理后台时,考虑到网上有许多优秀的html模板,但问题来了,网上找来的模板虽然画面优美,但是它的html文件和静态文件是连同一个get请求放在一起,为了实现前后端数据对接,我们设计一个巧妙的视图函数,通过操作request.META.PATH_INFO,将后缀为html的get请求返回模板,对于静态文件的请求则反馈HttpResponse,成功解决了前后端对接问题


Django的request.POST获取不到内容的原因
def _load_post_and_files(self):

函数看起来有点长，但是我们只要关注后面的if elif else这三个分支即可，从elif self.content_type == 'application/x-www-form-urlencoded':这个分支能看到只有请求header中的'Content-Type'：'application/x-www-form-urlencoded'才会填充request.POST，其它情况下只有一个空的<QueryDict: {}>。 

-------------------------------------------------------------------------------------
数据库的选择
考虑到并发量较低,选择基于磁盘的数据库
考虑到数据库事务处理较为简单,选择非关系型数据库
综上,选用mongoDB

---------------------------------------------------------------------------
django连接mongodb数据库
https://blog.csdn.net/kuangshp128/article/details/79039366
django@1.11.8
mongoengine@0.15.0
---------------------------------------------------
Django项目 | 使用MongoDB存储图片
https://blog.csdn.net/qq_40558629/article/details/85109771

-------------------------------------------------------------------------------


自增字段的设计

------------------------------------------------------------------------

值得改进的地方
后台管理,增加搜索菜品功能
前台显示所有菜品,不由菜品id排序,改为由菜品种类排序
餐桌结账功能
餐桌预定功能
--------------------------------------------------------------








